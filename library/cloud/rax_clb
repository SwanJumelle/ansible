#!/usr/bin/python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# This is a DOCUMENTATION stub specific to this module, it extends
# a documentation fragment located in ansible.utils.module_docs_fragments
DOCUMENTATION = '''
---
module: rax_clb
short_description: create / delete a load balancer in Rackspace Public Cloud
description:
     - creates / deletes a Rackspace Public Cloud load balancer.
version_added: "1.4"
options:
  algorithm:
    description:
      - algorithm for the balancer being created
    choices:
      - RANDOM
      - LEAST_CONNECTIONS
      - ROUND_ROBIN
      - WEIGHTED_LEAST_CONNECTIONS
      - WEIGHTED_ROUND_ROBIN
    default: LEAST_CONNECTIONS
  meta:
    description:
      - A hash of metadata to associate with the instance
    default: null
  name:
    description:
      - Name to give the load balancer
    default: null
  port:
    description:
      - Port for the balancer being created
    default: 80
  protocol:
    description:
      - Protocol for the balancer being created
    choices:
      - DNS_TCP
      - DNS_UDP
      - FTP
      - HTTP
      - HTTPS
      - IMAPS
      - IMAPv4
      - LDAP
      - LDAPS
      - MYSQL
      - POP3
      - POP3S
      - SMTP
      - TCP
      - TCP_CLIENT_FIRST
      - UDP
      - UDP_STREAM
      - SFTP
    default: HTTP
  state:
    description:
      - Indicate desired state of the resource
    choices:
      - present
      - absent
    default: present
  timeout:
    description:
      - timeout for communication between the balancer and the node
    default: 30
  type:
    description:
      - type of interface for the balancer being created
    choices:
      - PUBLIC
      - SERVICENET
    default: PUBLIC
  vip_id:
    description:
      - Virtual IP ID to use when creating the load balancer for purposes of
        sharing an IP with another load balancer of another protocol
    version_added: 1.5
  https_redirect:
    description:
      - redirect HTTP traffic to HTTPS.
      - only available for the HTTPS protocol, or HTTP with properly configured
        SSL termination
    choices:
      - "yes"
      - "no"
    default: "no"
    version_added: 1.6.5
  ssl_termination:
    description:
      - >
        Set up or reconfigure SSL termination for this load balancer. The hash
        must contain the following keys: C(private_key): the private SSL key;
        C(certificate): the public SSL certificate. The hash may contain the
        following optional keys: C(secure_port): the port to listen for secure
        traffic, default: 443; C(intermediate_certificate): an intermediate
        certificate required to validate the provided SSL certificate;
        C(enabled): if set to "no", temporarily disable SSL termination without
        discarding existing SSL credentials; C(secure_traffic_only): if set to
        "yes", the load balancer will only accept secure traffic. default: "no";
        C(state): if set fo "absent," SSL termination will be removed from this
        balancer. default: "present".
    default: null
    version_added: 1.6.5
  wait:
    description:
      - wait for the balancer to be in state 'running' before returning
    default: "no"
    choices:
      - "yes"
      - "no"
  wait_timeout:
    description:
      - how long before wait gives up, in seconds
    default: 300
author: Christopher H. Laco, Matt Martz
extends_documentation_fragment: rackspace
'''

EXAMPLES = '''
- name: Build a Load Balancer
  gather_facts: False
  hosts: local
  connection: local
  tasks:
    - name: Load Balancer create request
      local_action:
        module: rax_clb
        credentials: ~/.raxpub
        name: my-lb
        port: 8080
        protocol: HTTP
        type: SERVICENET
        timeout: 30
        region: DFW
        wait: yes
        state: present
        meta:
          app: my-cool-app
      register: my_lb
'''


try:
    import pyrax
    HAS_PYRAX = True
except ImportError:
    HAS_PYRAX = False


def cloud_load_balancer(module, state, name, meta, algorithm, port, protocol,
                        vip_type, timeout, wait, wait_timeout, vip_id,
                        https_redirect, ssl_termination):
    for arg in (state, name, port, protocol, vip_type):
        if not arg:
            module.fail_json(msg='%s is required for rax_clb' % arg)

    if int(timeout) < 30:
        module.fail_json(msg='"timeout" must be greater than or equal to 30')

    # Validate the SSL termination hash, if one was provided.
    if ssl_termination:
        ssl_keys = set(ssl_termination.keys())
        missing = []
        required_when_present = ('private_key', 'certificate')
        optional_when_present = ('secure_port', 'intermediate_certificate', 'enabled',
                                 'secure_traffic_only', 'state')
        optional_when_required = required_when_present + optional_when_present

        # Default 'state' to 'present'.
        if 'state' not in ssl_termination:
            ssl_termination['state'] = 'present'

        if ssl_termination['state'] == 'present':
            for required in required_when_present:
                if required not in ssl_keys:
                    missing.append(required)
                ssl_keys.discard(required)

            for optional in optional_when_present:
                ssl_keys.discard(optional)
        else:
            for optional in optional_when_required:
                ssl_keys.discard(optional)

        # Any remaining keys are unrecognized.
        if missing or ssl_keys:
            message = 'The ssl_termination hash '
            if missing:
                message += 'is missing the required keys %s' % ', '.join(missing)
            if missing and ssl_keys:
                message += ' and '
            if ssl_keys:
                message += 'has the unrecognized keys %s.' % ', '.join(ssl_keys)
            module.fail_json(msg=message)

    changed = False
    balancers = []
    attempts = wait_timeout / 5

    clb = pyrax.cloud_loadbalancers
    if not clb:
        module.fail_json(msg='Failed to instantiate client. This '
                             'typically indicates an invalid region or an '
                             'incorrectly capitalized region name.')

    for balancer in clb.list():
        if name != balancer.name and name != balancer.id:
            continue

        balancers.append(balancer)

    if len(balancers) > 1:
        module.fail_json(msg='Multiple Load Balancers were matched by name, '
                             'try using the Load Balancer ID instead')

    if state == 'present':
        if isinstance(meta, dict):
            metadata = [dict(key=k, value=v) for k, v in meta.items()]

        if not balancers:
            try:
                virtual_ips = [clb.VirtualIP(type=vip_type, id=vip_id)]
                balancer = clb.create(name, metadata=metadata, port=port,
                                      algorithm=algorithm, protocol=protocol,
                                      timeout=timeout, virtual_ips=virtual_ips)

                if ssl_termination and ssl_termination['state'] == 'present':
                    pyrax.utils.wait_for_build(balancer, interval=5,
                                               attempts=attempts)

                    balancer.add_ssl_termination(
                        securePort=ssl_termination.get('secure_port', 443),
                        privatekey=ssl_termination['private_key'],
                        certificate=ssl_termination.get('certificate'),
                        intermediateCertificate=
                            ssl_termination.get('intermediate_certificate'),
                        enabled=ssl_termination.get('enabled'),
                        secureTrafficOnly=
                            ssl_termination.get('secure_traffic_only'))

                if https_redirect is not None:
                    # Apply HTTPS redirection *after* setting up SSL.
                    pyrax.utils.wait_for_build(balancer, interval=5,
                                               attempts=attempts)

                    balancer.update(httpsRedirect=https_redirect)

                changed = True
            except Exception, e:
                module.fail_json(msg='%s' % e.message)
        else:
            balancer = balancers[0]
            setattr(balancer, 'metadata',
                    [dict(key=k, value=v) for k, v in
                     balancer.get_metadata().items()])
            existing_ssl = balancer.get_ssl_termination()

            atts = {
                'name': name,
                'algorithm': algorithm,
                'port': port,
                'protocol': protocol,
                'timeout': timeout
            }
            for att, value in atts.iteritems():
                current = getattr(balancer, att)
                if current != value:
                    changed = True

            if changed:
                balancer.update(**atts)

            if balancer.metadata != metadata:
                balancer.set_metadata(meta)
                changed = True

            if ssl_termination and ssl_termination['state'] == 'present':
                ssl_atts = {
                    'securePort': ssl_termination.get('secure_port', 443),
                    'privatekey': ssl_termination['private_key'],
                    'certificate': ssl_termination['certificate'],
                    'intermediateCertificate':
                        ssl_termination.get('intermediate_certificate'),
                    'enabled': ssl_termination.get('enabled'),
                    'secureTrafficOnly':
                        ssl_termination.get('secure_traffic_only')
                }

                ssl_changed = False
                for ssl_att, value in ssl_atts.iteritems():
                    if value and existing_ssl.get(ssl_att) != value:
                        ssl_changed = True

                if ssl_changed:
                    if changed:
                        pyrax.utils.wait_for_build(balancer, interval=5,
                                                   attempts=attempts)
                    balancer.add_ssl_termination(**ssl_atts)
                    changed = True

            # Update HTTPS redirection after potentially creating or re-configuring
            # SSL termination, but before removing SSL termination.
            if https_redirect is not None:
                if balancer.httpsRedirect != https_redirect:
                    if changed:
                        pyrax.utils.wait_for_build(balancer, interval=5,
                                                   attempts=attempts)
                    balancer.update(httpsRedirect=https_redirect)
                    changed = True

            if existing_ssl and ssl_termination and ssl_termination['state'] == 'absent':
                if changed:
                    pyrax.utils.wait_for_build(balancer, interval=5,
                                               attempts=attempts)

                # Remove the existing SSL termination.
                balancer.delete_ssl_termination()
                changed = True

            virtual_ips = [clb.VirtualIP(type=vip_type)]
            current_vip_types = set([v.type for v in balancer.virtual_ips])
            vip_types = set([v.type for v in virtual_ips])
            if current_vip_types != vip_types:
                module.fail_json(msg='Load balancer Virtual IP type cannot '
                                     'be changed')

        if wait:
            pyrax.utils.wait_for_build(balancer, interval=5, attempts=attempts)

        balancer.get()
        instance = rax_to_dict(balancer, 'clb')

        result = dict(changed=changed, balancer=instance)

        if balancer.status == 'ERROR':
            result['msg'] = '%s failed to build' % balancer.id
        elif wait and balancer.status not in ('ACTIVE', 'ERROR'):
            result['msg'] = 'Timeout waiting on %s' % balancer.id

        if 'msg' in result:
            module.fail_json(**result)
        else:
            module.exit_json(**result)

    elif state == 'absent':
        if balancers:
            balancer = balancers[0]
            try:
                balancer.delete()
                changed = True
            except Exception, e:
                module.fail_json(msg='%s' % e.message)

            instance = rax_to_dict(balancer, 'clb')

            if wait:
                pyrax.utils.wait_until(balancer, 'status', ('DELETED'),
                                       interval=5, attempts=attempts)
        else:
            instance = {}

    module.exit_json(changed=changed, balancer=instance)


def main():
    argument_spec = rax_argument_spec()
    argument_spec.update(
        dict(
            algorithm=dict(choices=CLB_ALGORITHMS,
                           default='LEAST_CONNECTIONS'),
            meta=dict(type='dict', default={}),
            name=dict(),
            port=dict(type='int', default=80),
            protocol=dict(choices=CLB_PROTOCOLS, default='HTTP'),
            state=dict(default='present', choices=['present', 'absent']),
            timeout=dict(type='int', default=30),
            type=dict(choices=['PUBLIC', 'SERVICENET'], default='PUBLIC'),
            vip_id=dict(),
            https_redirect=dict(type='bool'),
            ssl_termination=dict(type='dict'),
            wait=dict(type='bool'),
            wait_timeout=dict(default=300),
        )
    )

    module = AnsibleModule(
        argument_spec=argument_spec,
        required_together=rax_required_together(),
    )

    if not HAS_PYRAX:
        module.fail_json(msg='pyrax is required for this module')

    algorithm = module.params.get('algorithm')
    meta = module.params.get('meta')
    name = module.params.get('name')
    port = module.params.get('port')
    protocol = module.params.get('protocol')
    state = module.params.get('state')
    timeout = int(module.params.get('timeout'))
    vip_id = module.params.get('vip_id')
    vip_type = module.params.get('type')
    https_redirect = module.params.get('https_redirect')
    ssl_termination = module.params.get('ssl_termination')
    wait = module.params.get('wait')
    wait_timeout = int(module.params.get('wait_timeout'))

    setup_rax_module(module, pyrax)

    cloud_load_balancer(module, state, name, meta, algorithm, port, protocol,
                        vip_type, timeout, wait, wait_timeout, vip_id,
                        https_redirect, ssl_termination)


# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.rax import *

### invoke the module
main()
